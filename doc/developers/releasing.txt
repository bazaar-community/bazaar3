Releasing Bazaar
################

This document describes the processes for making and announcing a Bazaar
release, and managing the release process.  This is just one phase of the
`overall development cycle
<http://doc.bazaar.canonical.com/developers/cycle.html>`_, (go re-read this
document to ensure it hasn't been updated since you last read it) but it's
the most complex part.

If you're doing your first release you can follow this document and read
each step explanation. It's also a good practice to read it for any release
to ensure you don't miss a step and to update it as the release process
evolves.

If you're helping the Release Manager (RM) for one reason or another, you
may notice that he didn't follow that document scrupulously. He may have
good reasons to do that but he may also have missed some parts.

.. contents::


Preconditions
=============

#. PQM access rights (or you won't be able to land any change)

#. Download the pqm plugin and install it into your ``~/.bazaar/plugins``::

     bzr branch lp:bzr-pqm ~/.bazaar/plugins/pqm

#. Alternatively, you can download and install ``lp:hydrazine`` (the main
   difference is that hydrazine requires the branch to land to be hosted on
   launchpad).

What do we release
==================

In this document, we're talking about source releases only, packages and
installers are built from this but we won't talk about them here.

Every release is part of a series, ``bzr-2.4.1`` is part of series ``2.4``.

We do two different kind of releases: the betas releases and the stable
releases for a given series.

For a given series, releases will be done to deliver new versions of bzr to
different kinds of users:

#. beta releases: named ``x.ybn`` where ``x.y`` is the series and ``n``
   starts at 1 and is incremented. These releases are targeted to beta
   testers who don't want to run from source but are interested in features
   or improvements.

#. stable releases: name ``x.y.z`` where ``x.y.`` is the series and ``z``
   starts at 0 and is incremented. These releases are targeted at people
   that want bugfixes only and no new features.


Differences in the release process between beta and stable release will be
mentioned when needed.

When do we relase ?
===================

As of July 2011, we maintain four series (and one that is about to be EOLed).
Concurrently releasing them all at the same time makes it harder to shorten
the delay between the source availability and the package building longer
than necessary (we delay the official announcement until most of our users
can install the new release).

In order to continue to do time-based releases, we need to plan the
releases by series to minimize the collisions. In the end, it's the Release
Manager call to decide whether he prefers to do all releases at once
though, so the rules presented here are a conservative approach.

We want to respect the following rules:

#. as much as possible releases should not disturb development, and
   ongoing development should not disturb releases,

#. the most recent development series should release once a month during
   the beta period (see `Development cycles <cycle.html>`_ for more
   details),

#. the most recent stable series should release every other month (based
   on the amount of bug fixes, this can be shorter or longer depending on
   the bugs importance),

#. previous series should release on a regular basis without interfering
   with the most recent series with a decreasing order of priority (again
   this should be based on bugs importance and user feedback),

#. the death of a series should be planned ahead of time. 6 months should
   give enough time to our users to migrate to a more recent series. This
   doesn't mean we will make a release at the end of the series, just that
   before the end date we *could* possibly put out another release if
   there was a sufficiently important fix.  Beyond that date, we won't
   even land changes on that branch (unless something causes a miraculous
   resurrection.)

#. there should not be more than 2 releases in the same week (but the
   Release Manager is free to ignore this (get in touch with packagers
   though),

#. the series are aligned with Ubuntu releases for convenience since we
   create a new series every 6 months. This means that we support the
   stable series for 18 months. Note that we also propose the most recent
   stable series via the stable PPA but that the SRU processs allow us to
   reach a wider audience.

At the start of a series cycle
==============================

To start a new series cycle:

#. Create a new series ``x.y`` at <https://launchpad.net/bzr/+addseries>.

#. Add milestones at <https://launchpad.net/bzr/x.y/+addmilestone> to that
   series for the beta releases and the stable series mentioning their
   expected dates. Only the milestone associated to the next release in
   this series should be left active to avoid clutter when targeting bugs.

#. If you made a new series, you will need to create a new pqm-controlled
   branch for this release series. This branch will be used only from the
   first non-beta release onwards. It needs to be created by a Canonical
   sysadmin (ask the core devs for instructions or to do it for you).

#. Start a new release-notes file::

       cd doc/en/release-notes
       cp series-template.txt bzr-x.y.txt  # e.g. bzr-2.3.txt
       bzr add bzr-x.y.txt

#. Start a new whats-new file::

       cd doc/en/whats-new
       cp template.txt bzr-x.y.txt  # e.g. bzr-2.6.txt
       bzr add bzr-x.y.txt

#. Update ``doc/en/index.txt`` to point to the new whats-new file.

At the start of a release cycle
===============================

To start a new release cycle:

#. Send mail to the list with the key dates, who will be the release
   manager, and the main themes or targeted bugs.  Ask people to nominate
   objectives, or point out any high-risk things that are best done early,
   or that interact with other changes. This is called the metronome mail
   and is described in `Development cycles <cycle.html>`_.

#. Make a local branch to prepare the release::

        bzr branch lp:bzr/x.y x.y-dev

   If you're doing your first beta release, branch from trunk::

       bzr branch lp:bzr x.y-dev

   Note that you will generally reuse the same branch for all releases in a
   given series.

#. Configure pqm-submit for this branch, with a section like this (where
   ``x.y`` is the series for your release). **Or use hydrazine for easier
   setup** ``~/.bazaar/locations.conf``::

	[/home/mbp/bzr/x.y-dev]
	pqm_email = Canonical PQM <pqm@bazaar-vcs.org>
	submit_branch = http://bazaar.launchpad.net/~bzr-pqm/bzr/x.y
	parent_branch = http://bazaar.launchpad.net/~bzr-pqm/bzr/x.y
	public_branch = http://bazaar.example.com/x.y-dev
	submit_to = bazaar@lists.canonical.com
	smtp_server = mail.example.com:25

    Please see <http://doc.bazaar.canonical.com/developers/HACKING.html#an-overview-of-pqm>
    for more details on PQM

#. Update the version number in the ``bzr`` script, and the
   ``bzrlib/__init__.py`` file::
   
       version_info = (x, y, z, 'dev', 0)
   
#. Add a new section at the top of the current release notes (in
   ``doc/en/release-notes``) about the new release, including its version
   number and the headings from ``release-template.txt``.

#. Update the "What's New" documents in ``doc/en/whats-new``.

#. Make sure a milestone exists for your release and that it is active,
   <https://launchpad.net/bzr/x.y> lists the existing milestones,
   <https://launchpad.net/bzr/x.y/x.y.z/+edit> allows you to toggle the
   active flag.

#. Commit this and send it to PQM.


Doing a particular release
==========================

Update the source code
----------------------

#. Check that there is a milestone for the release you're doing. If there
   is no milestone it indicates a process problem - make the milestone but
   also mail the list to raise this issue in our process. Milestones are
   found at <https://launchpad.net/bzr/+milestone/x.y.z>.

#. Merge into your branch all previous stable series fixes that haven't been
   merged yet. For example, if you're releasing 2.6.x, make sure the fixes
   on 2.5, 2.4, 2.3, etc have already been merged up::

     bzr merge lp:bzr/2.4

   and commit that merge in its own commit. This should happen only if the
   devs landing changes in previous releases forgot to merge them up. Since
   this can slow down the freeze, feel free to gently remind them about
   their duties ;) If you feel unsafe resolving the conflicts or it's too
   time consuming, contact the related devs and skip this merge.
 
#. In the release branch, update  ``version_info`` in ``./bzrlib/__init__.py``.
   Make sure the corresponding milestone exists.
   Double check that ./bzr ``_script_version`` matches ``version_info``. Check
   the output of ``./bzr --version``.

   For beta releases use::

       version_info = (2, 6, 0, 'beta', SERIAL)

   For instance 2.6b1::

       version_info = (2, 6, 0, 'beta', 1)

   For stable releases use::

       version_info = (2, 6, 0, 'final', 0)

#. Update the ``./doc/en/release-notes/`` section for this release.

   Check that all news entries related to this release have been added in
   the right section. For example, if you're releasing 2.6b2, the following
   command should display a a single chuk diff for the 2.6b2 release::

     bzr diff -rbzr-2.6b2.. doc/en/release-notes/bzr-2.6.txt

   Fill out the date and a description of the release under the existing
   header (the diff above will help you summarizing). If there isn't one,
   follow the instructions above for using the ``release-template.txt`` file
   and remind people that they should document their changes there ;)

   See *2.6b1* or similar for an example of what this looks like.

#. Add or check the summary of the release into the "What's New" document.

  If this is the first release in a new series make sure to update the
  introduction mentioning:

  * the date of this first release,
  * until when the series is expected to be supported.

  Looking at ``bzr annotate`` for previous series should give you the right
  hints. The ``doc/en/_templates/index.html`` file should also be updated.

#. To check that all bugs mentioned in the release notes are actually
   marked as closed in Launchpad, you can run
   ``tools/check-newsbugs.py``::

     ./tools/check-newsbugs.py doc/en/release-notes/bzr-x.y.txt

   As of 2011-07-18, all bugs mentioned in the output of the script requires
   some sort of intervention (either changing the status if it's not 'Fix
   Released' or setting a different milestone if the bug hasn't been
   fixed). A few false positives may remain in the older series, don't let
   this slow you down too much. This script accepts options you may find
   useful, use ``./tools/check-newsbugs.py`` to display its usage (``-w``
   will open each bug in your browser for example).

#. For beta releases update the translation template::

     BZR_PLUGIN_PATH=-site make po/bzr.pot

   This is especially important for the final beta release which is when
   translations are frozen and translators are requested (see `The final
   beta - branching and translations`_) to make the translations.

#. For stable releases update the translations::

     bzr merge lp:~bzr-core/bzr/bzr-translations-export-x.y

#. Commit these changes to the release branch, using a command like::

     bzr commit -m "Release 2.3.1"

   The diff before you commit will be something like::

      === modified file 'bzrlib/__init__.py'
      --- bzrlib/__init__.py	2011-02-09 06:35:00 +0000
      +++ bzrlib/__init__.py	2011-03-10 10:24:47 +0000
      @@ -52,7 +52,7 @@
       # Python version 2.0 is (2, 0, 0, 'final', 0)."  Additionally we use a
       # releaselevel of 'dev' for unreleased under-development code.
       
      -version_info = (2, 3, 1, 'dev', 0)
      +version_info = (2, 3, 1, 'final', 0)
       
       # API compatibility version
       api_minimum_version = (2, 3, 0)
      
      === modified file 'doc/en/release-notes/bzr-2.3.txt'
      --- doc/en/release-notes/bzr-2.3.txt	2011-03-09 08:30:16 +0000
      +++ doc/en/release-notes/bzr-2.3.txt	2011-03-10 10:40:47 +0000
      @@ -8,23 +8,10 @@
       bzr 2.3.1
       #########
       
      -:2.3.1: NOT RELEASED YET
      -
      -External Compatibility Breaks
      -*****************************
      -
      -.. These may require users to change the way they use Bazaar.
      -
      -New Features
      -************
      -
      -.. New commands, options, etc that users may wish to try out.
      -
      -Improvements
      -************
      -
      -.. Improvements to existing commands, especially improved performance 
      -   or memory usage, or better results.
      +:2.3.1: 2011-03-10
      +
      +This is a bugfix release. Upgrading is recommended for all users of earlier
      +2.3 releases.
       
       Bug Fixes
       *********
      
      === modified file 'doc/en/whats-new/whats-new-in-2.3.txt'
      --- doc/en/whats-new/whats-new-in-2.3.txt	2011-02-03 16:29:18 +0000
      +++ doc/en/whats-new/whats-new-in-2.3.txt	2011-03-10 11:10:36 +0000
      @@ -17,8 +17,13 @@
       improvements made to the core product, it highlights enhancements within the
       broader Bazaar world of potential interest to those upgrading.
       
      -Bazaar 2.3.0 is fully compatible both locally and on the network with 2.0 2.1,
      -and 2.2, and can read and write repositories generated by all previous
      +Bazaar 2.3.1 includes all the fixes in the un-released 2.0.7, 2.1.4 and 2.2.5
      +versions that weren't included in 2.3.0 and fixes some bugs on its own.
      +
      +See the :doc:`../release-notes/index` for details.
      +
      +Bazaar 2.3 is fully compatible both locally and on the network with 2.0, 2.1,
      +and 2.2. It can read and write repositories generated by all previous
       versions.
       
       Changed Behaviour
      

#. Tag the new release::

     bzr tag bzr-2.6.0

#. Push those changes to a bzr branch that is public and accessible on the
   Internet. PQM will pull from this branch when it attempts to merge your
   changes. Then submit those changes to PQM for merge into the appropriate
   release branch::

     bzr push
     bzr pqm-submit -m "(vila) Release 2.6.0 (Vincent Ladeuil)"

   Note that ``bzr push`` should mention updating one tag (which you just
   created). If it doesn't, double-check that you created (and pushed) this
   tag.

   Or with hydrazine::

     bzr lp-propose -m "Release 1.14" --approve lp:bzr/1.14
     feed-pqm bzr

#. When PQM succeeds, pull down the master release branch.


Making the source tarball
-------------------------

#. Change into the source directory and run ::

     make dist

#. Now we'll try expanding this tarball and running the test suite
   to check for packaging problems::

     make check-dist-tarball | subunit2pyunit

   You may encounter failures while running the test suite caused by your
   locally installed plugins. Use your own judgment to decide if you can
   release with these failures. When in doubt, disable the faulty plugins
   one by one until you get no more failures. Alternatively, you can use
   ``BZR_DISABLE_PLUGINS`` or ``BZR_PLUGIN_PATH=-site`` to disable one or
   all plugins.

   Until <http://pad.lv/839461> is fixed, you may encounter issues if you
   cut a release for old stable branches (<= 2.2) and use a more recent
   OS/distro. If that's the case, check the bug status and use the following
   workaround if no fix is available::

     export TTPATH=<local branch of lp:testtools -r 0.9.2>
     export SUPATH=<local branch of lp:subunit -r 0.0.6>
     PYTHONPATH=$TTPATH:$SUPATH/python PATH=$SUPATH/filters:${PATH} BZR_PLUGIN_PATH=-site make check-dist-tarball PYTHON=python2.6 | subunit2pyunit

   Remember that PQM has just tested everything too, this step is
   particularly testing that the pyrex extensions, which are updated
   by your local pyrex version when you run make dist, are in good
   shape.


Publishing the source tarball
-----------------------------

#. Go to the relevant <https://launchpad.net/bzr/x.y> series page in Launchpad.

#. Create a release of the milestone, and upload the source tarball and
   the GPG signature.  Or, if you prefer, use the
   ``tools/packaging/lp-upload-release`` script to do this. Note that
   this changes what the download widget on the Launchpad bzr home
   page shows, so don't stop the release process yet, or platform binary
   installers won't be made and the download list will stay very small!
   <https://bugs.launchpad.net/launchpad/+bug/586445>


Kick off the next cycle
-----------------------

From that point, there is no possible return, the tarball has been uploaded
so you can relax a bit.

You're still holding a "social" lock on the launchpad branch though. Until
your start the next cycle, nobody should land anything on this branch. If
they do, they either targeted the wrong branch or didn't update the news
file correctly, so the sooner the branch is opened again, the better.

This matters more for ``lp:bzr`` than for ``lp:bzr/x.y``, ``lp:bzr`` should
always be open for landing, so you should do `At the start of a release
cycle`_ as soon as possible (i.e. update the version number in ``bzr`` and
``bzrlib/__init__``, create/update the news files and create/update the
milestone for the next relase).

You may also need to do `At the start of a series cycle`_ if you're starting
a new series.

The final beta - branching and translations
-------------------------------------------

A word of caution: the instructions above works well for all releases but
there is one special case that requires a bit more care: when you release
the *last* beta for a given ``x.y`` series (from trunk aka lp:bzr), you need
to setup *two* branches for the next cycle:

#. ``lp:bzr`` needs to be opened for the next *series* ``x.(y+1)``.

#. ``lp:bzr/x.y`` needs to be opened for the next *release* ``x.y.0`` in the
   series. Since this is first real use of ``lp:bzr/x.y``, this is also the
   deadline for the PQM branch to be created.

Both are important as ``lp:bzr`` should remain open so any change can be
landed, ``lp:bzr/x.y`` on the other hand should be ready to receive bug
fixes.

``lp:bzr`` is generally more important as the bug fixes on ``lp:bzr/x.y``
won't be released sooner than a month from now whereas people may already
been waiting to land on ``lp:bzr``.

In a nutshell:

#. Open ``lp:bzr`` for ``x.(y+1)``

#. Create or update the ``x.y`` PQM branch based on whatever revision you
   want to release. Since it takes time to create the PQM branch for the new
   series you should plan to get it created a few days before you need it
   and seed it with the revision from trunk you want to base your release of
   (ask a LOSA for pulling this revision from trunk and pushing it to the
   series branch (``lp:bzr/x.y``) when you're ready).

#. Release ``x.y.0`` from ``lp:bzr/x.y``

#. Open ``lp:bzr/x.y`` for bug fixes

You also need to ensure Launchpad is set up to import/export translations
for the new branch and inform translators.

#. Push the last beta release to a new branch::

     bzr push lp:~bzr-core/bzr/bzr-translations-export-x.y

#. On the translations series synchronization settings page
   <https://translations.launchpad.net/bzr/x.y/+translations-settings>
   turn on ``Import template files`` then for exports click ``Choose a
   target branch`` and point it at the branch you just pushed.

#. E-mail translators to announce that the forthcoming stable release of bzr
   is ready for translations.  Send to
   ``launchpad-translators@lists.launchpad.net`` and
   ``ubuntu-translators@lists.ubuntu.com``.

#. The series is now frozen for strings and API, see below for adding
   that to the announcement.

Announcing the source freeze
----------------------------

#. Post to the ``bazaar@lists.canonical.com`` and
   ``bzr-packagers@lists.launchpad.net`` lists, saying that the source has
   been frozen. Be extra clear that this is only a *source* release targeted
   at packagers and installer builders (see
   <https://bugs.launchpad.net/launchpad/+bug/645084>).  This is the cue for
   platform maintainers and plugin authors to update their code.  This is
   done before the general public announcement of the release.

   The freeze announcement generally guess the date of the official public
   announcement, for the most recent stable series (the one supported by the
   installers and most of the distributions) it's generally a few days after
   the freeze. For older series supported only via SRUs for Ubuntu, we don't
   control the process as tightly so guessing the date is not appropriate.

   For the final beta release include in your announcement a notice of
   API and translation freezes noting that public methods should not
   be removed or changed and strings should not be added or changed.

#. Pause for a few days. 


Publishing the release
----------------------

There is normally a delay of a few days after the source freeze to allow
for binaries to be built for various platforms. Once they have been built,
we have a releasable product.  The next step is to make it generally
available to the world.

#. Go to the release web page at <https://launchpad.net/bzr/x.y/x.y.z>

#. Announce on the `Bazaar website <http://bazaar.canonical.com/>`_.  This
   page is edited in ``build.py`` in the lp:bzr-website branch. (Changes
   pushed to this branch are refreshed by a cron job on escudero.)

#. Check that the documentation for this release is available in
   <http://doc.bazaar.canonical.com>.  It should be automatically build when
   the branch is created, by a cron script ``update-bzr-docs`` on
   ``escudero``. When the first release is created in a new series, a branch
   needs to be created on ``escudero``::

     ssh escudero.canonical.com
     sudo -u bzr-web -s
     cd /srv/doc.bazaar.canonical.com/
     bzr branch lp:bzr/2.7 bzr/bzr.2.7

   And the ``bzr/bin/update-bzr-docs`` script needs to refer to it.

   The ``lp:bzr-alldocs`` branch also needs to be updated when a new series
   is introduced, see the ``README`` file there for more instructions
   (looking at the branch history is also a good way to understand what
   needs to be done and to document any policy changes).

Announcing the release
----------------------

Now that the release is publicly available, tell people about it.

#. Make an announcement mail.

   For beta releases, this is sent to the ``bazaar@lists.canonical.com`` and
   ``bazaar-announce@lists.canonical.com`` lists.

   For stable releases (excluding SRUs which are for older stable releases),
   it should also be cc'd to ``info-gnu@gnu.org``,
   ``python-announce-list@python.org``, ``bug-directory@gnu.org``.

   In all cases, it is good to set ``Reply-To: bazaar@lists.canonical.com``,
   so that people who reply to the announcement don't spam other lists.

   The announce mail will look something like this::

      Subject: bzr x.y.z released!

      The Bazaar team is happy to announce availability of a new
      release of the bzr adaptive version control system.

      Bazaar <http://bazaar.canonical.com/> is a Canonical project and part
      of the GNU project <http://gnu.org/> to produce a free operating
      system.

      <<Summary paragraph from news>>

      Thanks to everyone who contributed patches, suggestions, and
      feedback.

      Bazaar is now available for download from
      https://launchpad.net/bzr/x.y/x.y.z/ as a source tarball; packages
      for various systems will be available soon.

      <<release notes from this release back to the last major release>>

   Feel free to tweak this to your taste.

#. Make an announcement through <https://launchpad.net/bzr/+announce>
   mentioning the milestone URL <https://launchpad.net/bzr/+milestone/x.y.z>
   so people get an easy access to details.

#. Announce on https://freecode.com/projects/bazaar-vcs

   This should be done for beta releases and stable releases. If you do not
   have a Freecode account yet, ask one of the existing admins.

   The purpose here is to point users to the latest stable release
   (i.e. SRUs are excluded) while still publishing announcements for beta
   releases.

   There are several kinds of modifications that could be done there via the
   ``Administration`` box in the lower right area of the page:

   * Edit the project: This is where most of the URLs proposed in the
     ``Links`` box are edited. This should rarely change except for the URLs
     related to the latest stable release.

   * New announcement: When doing a release, put the summary of the release
     (you can't embed URLs there, the moderation staff remove them). Users
     can still access the releases notes via the ``Release Notes`` URL in
     the ``Links`` box in the upper right area of the page. When doing the
     first stable release in a series, delete the ``Unstable installers``
     <https://launchpad.net/bzr/x.y/x.ybn> and ``Unstable source tarball``
     <http://launchpad.net/bzr/x.y/x.ybn/+download/bzr-x.ybn.tar.gz>
     links. Conversely, when creating the first beta in a development
     series, create these links again. Check all links when doing other
     kinds of release.

#. Update `<http://en.wikipedia.org/wiki/Bazaar_(software)>`_ -- this should
   be done for the stable and beta releases.

#. Update the python package index: <http://pypi.python.org/pypi/bzr>

   From the tarball created and tested earlier ::

     twine upload -s ../bzr-2.7.0.tar.gz

   Remember to check the results afterward -- this should be done for
   stable releases but not for beta releases nor SRUs.

   The ``twine`` command is provided by the ``twine`` package on Debian and
   Ubuntu.

   If in doubt, you can test with <https://testpypi.python.org/pypi> where
   you can register yourself, register the bzr project and upload (and then
   remove the upload and delete the project so a new release manager can
   enjoy the same facilities). If the project already exists, have one of
   the existing owners of the project add you to the group.

   To use the pypi test site, you need to record your credentials for an
   existing user (the registration process is manual and starts at
   <https://testpypi.python.org/pypi?%3Aaction=register_form>.

   Once registered, you can record your crdentials in your ``~/pypirc`` file
   with ::

     [testpypi]
     username:<login on testpypi>
     password:<password on testpypi>
     repository = https://testpypi.python.org/pypi

   Registering the bzr project if doesn't exist is achieved with::

     python setup.py -r https://testpypi.python.org/pypi register

  Uploading is done with::

    twine upload -r testpypi -s ../bzr-2.7.0.tar.gz

   To be able to upload the release you must create an account on
   <http://pypi.python.org/pypi> and have one of the existing owners of the
   project add you to the group and update your ``[pypi]`` section in your
   ``~/pypirc`` file.


Merging the released code back to trunk
---------------------------------------

Merge the release branch back into the trunk.  The ``doc/en/release-notes``
changes should be merged into the right place because each release series
has its own release-notes file, but double-check.

If it's not already done, advance the version number in ``bzr`` and
``bzrlib/__init__.py``.  Submit this back into pqm for bzr.dev.

As soon as you change the version number in trunk, make sure you have
created the corresponding milestone to ensure the continuity in bug
targeting or nominating. Depending on the change, you may even have to
create a new series (if your change the major or minor release number), in
that case go to `At the start of a series cycle`_ and follow the
instructions from there.


Releases until the final one
----------------------------

Congratulations - you have made your first release.  Have a beer or fruit
juice - it's on the house! If it was a beta, you're not finished
yet. Another beta or hopefully a stable release is still to come.

The process is the same as for the first release. Goto `Doing a particular
release`_ and follow the instructions again. Some details change between
beta and stable releases, but they should be documented. If the instructions
aren't clear enough, please fix them.


Getting the release into Ubuntu
-------------------------------

(Feel free to propose or add new sections here about what we should do to
get bzr into other places.)

For the currently-under-development release of Ubuntu, no special action
is needed: the release should be picked by Debian and synced from there into
Ubuntu.

Releases off stable bzr branches should go in to the ``-updates`` of the
Ubuntu release that originally contained that branch.  (Ubuntu Lucid had
bzr 2.2.0, so should get every 2.2.x update.)  This means going through
the `SRU (Stable Release Updates)
<https://wiki.ubuntu.com/StableReleaseUpdates>`__ process.   

Since September 2010, bzr has received approval by the technical
board for the `MicroReleaseExceptions
<https://wiki.ubuntu.com/StableReleaseUpdates/MicroReleaseExceptions>`__
category so that whole bugfix releases can more easily be
approved.

Progress on these realeases is tracked on the `SRU wiki
<http://wiki.bazaar.canonical.com/UbuntuStableReleaseUpdates>`_
page.

**After making a bzr stable-release release, nominate the most serious bug
for the appropriate Ubuntu release and subscribe the `ubuntu-sru` team.**

This requires a couple of tricks (please reconsider and tweak as things
evolves from one release to the other):

 * create a distro task with the ``Also affects distribution`` button and
   select ``bzr (Ubuntu)``.

 * change the *URL* to point to ``ubuntu/+source/bzr`` instead of ``bzr``
   (this is needed if you create the distro task but not if it exists
   already). You should now be able to click the ``Nominate for release``
   button and select the right Ubuntu release. As of September 2010, this
   means:

  * ``quantal`` for the 2.6 series,
  * ``precise`` for the 2.5 series,
  * ``oneiric`` for the 2.4 series,
  * ``natty`` for the 2.3 series,
  * ``maverick`` for the 2.2 series,
  * ``lucid`` for the 2.1 series,

 * Subscribe the ``~ubuntu-sru`` team to the bug.

 * Add a comment targeted to ``~ubuntu-sru`` explaining the expectations
   (we are targeting running the test suite during the build which, as of
   September 2010, fails for known reasons that are currently addressed).
   Search for bugs tagged with ``sru`` for examples and don't forget to tag
   the bug you selected.


See also
--------

* `Packaging into the bzr PPA <ppa.html>`_ to make and publish Ubuntu
  packages.
* `Bazaar Developer Document Catalog <index.html>`_
* `Development cycles <cycle.html>`_: things that happen during the cycle
  before the actual release.

..
   vim: filetype=rst textwidth=74 ai shiftwidth=4
